<syn:localEntry xmlns:syn="http://ws.apache.org/ns/synapse" key="hms-4-select-resp-transformer" type="1">
   <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:s="http://schemas.xmlsoap.org/soap/envelope/" 
      xmlns:urn="urn:lnrisk:ws:wshealthcare:@ver=3.17"
      xmlns="urn:lnrisk:ws:wshealthcare:@ver=3.17"
      exclude-result-prefixes="urn"
      xmlns:ns1="http://www.healthmarketscience.com/hmsws">

      <xsl:output method="xml" omit-xml-declaration="yes" indent="yes" />
      <xsl:param name="LegacyLocationId"/>
      <xsl:param name="LegacyAggregateId"/>

      <xsl:template name="custom">
         <xsl:param name="statusDescriptionParam" />
         <xsl:param name="statusCodeParam" />
         <xsl:element name="RxcomPrescriberSelectResponse" inherit-namespaces="no" namespace="">
            <xsl:attribute name="version">4.0</xsl:attribute>
            <xsl:element name="ResponseStatus" inherit-namespaces="no" namespace="">
               <xsl:attribute name="statusCode"><xsl:value-of select="$statusCodeParam" /></xsl:attribute>
               <xsl:attribute name="statusDescription"><xsl:value-of select="$statusDescriptionParam" /></xsl:attribute>
            </xsl:element>
            <xsl:apply-templates select="//urn:Providers" />
         </xsl:element>
      </xsl:template>

      <xsl:template match="/">
         <xsl:choose>
            <xsl:when test="//s:Fault/*">
               <xsl:call-template name="custom">
                  <xsl:with-param name="resultSetSizeParam">0</xsl:with-param>
                  <xsl:with-param name="statusDescriptionParam"><xsl:value-of select="//s:Fault/s:faultstring[1]" /></xsl:with-param>
                  <xsl:with-param name="statusCodeParam"><xsl:value-of select="//s:Fault/s:faultcode[1]" /></xsl:with-param>
               </xsl:call-template>
            </xsl:when>
            <xsl:when test="count(//urn:Provider) = 0">
               <xsl:call-template name="custom">
                  <xsl:with-param name="resultSetSizeParam">0</xsl:with-param>
                  <xsl:with-param name="statusDescriptionParam">No Prescriber records found</xsl:with-param>
                  <xsl:with-param name="statusCodeParam">0</xsl:with-param>
               </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
               <xsl:call-template name="custom">
                  <xsl:with-param name="resultSetSizeParam">1</xsl:with-param>
                  <xsl:with-param name="statusDescriptionParam">Success</xsl:with-param>
                  <xsl:with-param name="statusCodeParam">200</xsl:with-param>
               </xsl:call-template>
            </xsl:otherwise>
         </xsl:choose>
      </xsl:template>

      <xsl:template match="//urn:Provider">
         <xsl:for-each select="./urn:Locations/urn:Location">
            <xsl:variable name="state" select="./urn:Address/urn:State" />
             <xsl:variable name="StreetAddress1" select="./urn:Address/urn:StreetAddress1" />
             <xsl:variable name="Zip5" select="./urn:Address/urn:Zip5" />
            <xsl:if test="$LegacyLocationId = ./urn:Address/urn:LegacyLocationId and $LegacyAggregateId = ./urn:Address/urn:LegacyAggregateId">
               <xsl:element name="Prescriber" xmlns="">
                  <xsl:element name="lastName">
                     <xsl:value-of select="../../urn:ProviderNames/urn:ProviderName[1]/urn:Name/urn:Last" />
                  </xsl:element>
                  <xsl:element name="firstName">
                     <xsl:value-of select="../../urn:ProviderNames/urn:ProviderName[1]/urn:Name/urn:First" />
                  </xsl:element>
                  <xsl:element name="midName">
                     <xsl:value-of select="../../urn:ProviderNames/urn:ProviderName[1]/urn:Name/urn:Middle" />
                  </xsl:element>
                  <xsl:element name="address">
                     <xsl:value-of select="./urn:Address/urn:StreetAddress1" />
                  </xsl:element>
                  <xsl:element name="address2">
                     <xsl:value-of select="./urn:Address/urn:StreetAddress2" />
                  </xsl:element>
                  <xsl:element name="city">
                     <xsl:value-of select="./urn:Address/urn:City" />
                  </xsl:element>
                  <xsl:element name="state">
                     <xsl:value-of select="./urn:Address/urn:State" />
                  </xsl:element>
                  <xsl:element name="zipCode">
                     <xsl:value-of select="./urn:Address/urn:PostalCode" />
                  </xsl:element>
                  <xsl:element name="areaCode">
                     <xsl:value-of select="substring(./urn:Phones/urn:Phone[1]/urn:Number,1,3)" />
                  </xsl:element>
                  <xsl:element name="phone">
                     <xsl:value-of select="substring(./urn:Phones/urn:Phone[1]/urn:Number,4,7)" />
                  </xsl:element>
                  <xsl:element name="areaCode2">
                     <xsl:value-of select="substring(./urn:Phones/urn:Phone[2]/urn:Number,1,3)" />
                  </xsl:element>
                  <xsl:element name="phone2">
                     <xsl:value-of select="substring(./urn:Phones/urn:Phone[2]/urn:Number,4,7)" />
                  </xsl:element>            
                  <xsl:element name="faxAreaCode">
                     <xsl:value-of select="substring(./urn:Faxes/urn:Fax[1]/urn:Number,1,3)" />
                  </xsl:element>
                  <xsl:element name="faxNum">
                     <xsl:value-of select="substring(./urn:Faxes/urn:Fax[1]/urn:Number,4,7)" />
                  </xsl:element>
                  <xsl:element name="faxAreaCode2">
                     <xsl:value-of select="substring(./urn:Faxes/urn:Fax[2]/urn:Number,1,3)" />
                  </xsl:element>
                  <xsl:element name="faxNum2">
                     <xsl:value-of select="substring(./urn:Faxes/urn:Fax[2]/urn:Number,4,7)" />
                  </xsl:element>  
                  <xsl:for-each select="../../urn:DEARecords/urn:DEARecord[./urn:Address/urn:StreetAddress1 = $StreetAddress1 and ./urn:Address/urn:Zip5 = $Zip5]">
                     <xsl:sort select="urn:Status" order="descending" />        
                     <xsl:if test="position()=1">
                           <xsl:element name="deaNum">
                              <xsl:value-of select="./urn:DEANumber" />
                           </xsl:element>
                           <xsl:element name="deaExpDate">
                              <xsl:value-of select="normalize-space(./urn:ExpirationDate)" />
                           </xsl:element>
                     </xsl:if>
                  </xsl:for-each>
                  <xsl:element name="npiNum">
                     <xsl:value-of select="../../urn:NPIRecords/urn:NPIRecord/urn:NPIInformation/urn:NPINumber" />
                  </xsl:element>
                  <xsl:element name="rcpsIdNum">
                     <xsl:value-of select="../../urn:LNPID" />
                  </xsl:element>            
                  <xsl:element name="vendorId">2</xsl:element>
                  <xsl:for-each select="../../urn:Licenses/urn:License[urn:LicenseState = $state]">
                     <xsl:if test="position()=1">
                        <xsl:element name="stateIdState" >
                           <xsl:value-of select="./urn:LicenseState" />
                        </xsl:element>
                        <xsl:element name="stateIdNum">
                           <xsl:value-of select="./urn:LicenseNumber" />
                        </xsl:element>
                     </xsl:if>
                  </xsl:for-each>
                  <xsl:choose>
                     <xsl:when test="count(../../urn:ProviderNames/urn:ProviderName[normalize-space(urn:Name/urn:ProfessionalSuffix) != '' and string-length(urn:Name/urn:ProfessionalSuffix) &lt; 9]) != 0">
                        <xsl:for-each select="../../urn:ProviderNames/urn:ProviderName[normalize-space(urn:Name/urn:ProfessionalSuffix) != '' and string-length(urn:Name/urn:ProfessionalSuffix) &lt; 9]">
                           <xsl:if test="position()=1">
                              <xsl:element name="degreeType">
                                 <xsl:value-of select="./urn:Name/urn:ProfessionalSuffix" />
                              </xsl:element>
                           </xsl:if>
                        </xsl:for-each>
                     </xsl:when>
                     <xsl:otherwise>
                        <xsl:choose>
                           <xsl:when test="count(../../urn:Licenses/urn:License[urn:LicenseState = $state and normalize-space(urn:LicenseType) != '' and urn:LicenseStatus = 'A']) != 0">
                              <xsl:for-each select="../../urn:Licenses/urn:License[urn:LicenseState = $state and normalize-space(urn:LicenseType) != '' and urn:LicenseStatus = 'A']">
                                 <xsl:if test="position()=1">
                                    <xsl:element name="degreeType">
                                       <xsl:value-of select="./urn:LicenseType" />
                                    </xsl:element>
                                 </xsl:if>
                              </xsl:for-each>
                           </xsl:when>
                           <xsl:otherwise>
                              <xsl:element name="degreeType">UKN</xsl:element>
                           </xsl:otherwise>
                        </xsl:choose>
                     </xsl:otherwise>
                  </xsl:choose>
                  <xsl:element name="specialty" />
                  <xsl:element name="specialty2" />
                  <xsl:for-each select="../../urn:MedicaidRecords/urn:MedicaidRecord[urn:State = $state]">
                     <xsl:if test="position()=1">
                        <xsl:element name="medicaidNum">
                           <xsl:value-of select="./urn:Number" />
                        </xsl:element>
                        <xsl:element name="medicaidState">
                           <xsl:value-of select="./urn:State" />
                        </xsl:element>
                     </xsl:if>
                  </xsl:for-each>
                  <xsl:element name="medicareNum" />
                  <xsl:element name="medicareState" />
                  <xsl:element name="waiverId">
                     <xsl:value-of select="../../urn:DEARecords/urn:DEARecord/urn:XDEAIndicator" />
                  </xsl:element>
                  <xsl:element name="locationIdentifier">
                     <xsl:value-of select="./urn:Address/urn:LegacyLocationId" />
                  </xsl:element>
                  <xsl:element name="addressGroupIdentifier">
                     <xsl:value-of select="./urn:Address/urn:LegacyAggregateId" />
                  </xsl:element> 
               </xsl:element>
            </xsl:if>
         </xsl:for-each>
      </xsl:template>

   </xsl:stylesheet>


</syn:localEntry>