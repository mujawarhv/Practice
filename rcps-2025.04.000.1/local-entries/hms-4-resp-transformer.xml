<syn:localEntry xmlns:syn="http://ws.apache.org/ns/synapse" key="hms-4-resp-transformer" type="1">
   <xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:s="http://schemas.xmlsoap.org/soap/envelope/"
      xmlns:urn="urn:lnrisk:ws:wshealthcare:@ver=3.17"
      xmlns="urn:lnrisk:ws:wshealthcare:@ver=3.17"
      exclude-result-prefixes="urn"
      xmlns:ns1="http://www.healthmarketscience.com/hmsws">

   <xsl:output method="xml" omit-xml-declaration="yes" indent="yes" />
   <xsl:param name="QueryState"/>
   <xsl:param name="QueryZip"/>
   <xsl:param name="QueryCity"/>
   <xsl:param name="QueryDeaNum"/>

   <xsl:template name="custom">
      <xsl:param name="resultSetSizeParam" />
      <xsl:param name="statusDescriptionParam" />
      <xsl:param name="statusCodeParam" />
      <xsl:element name="RxcomPrescriberQueryResponse" inherit-namespaces="no" namespace="">
         <xsl:attribute name="version">4.0</xsl:attribute>
         <xsl:attribute name="resultSetSize" inherit-namespaces="no" namespace=""><xsl:value-of select="$resultSetSizeParam" /></xsl:attribute>
         <xsl:element name="ResponseStatus" inherit-namespaces="no" namespace="">
            <xsl:attribute name="statusCode"><xsl:value-of select="$statusCodeParam" /></xsl:attribute>
            <xsl:attribute name="statusDescription"><xsl:value-of select="$statusDescriptionParam" /></xsl:attribute>
            <xsl:element name="PrescriberRecords" inherit-namespaces="no" namespace="">
               <xsl:choose>
                  <xsl:when test="$resultSetSizeParam = 0">
                     <xsl:call-template name="noResultsElement"></xsl:call-template>
                  </xsl:when>
                  <xsl:otherwise>
                     <xsl:apply-templates select="//urn:Providers" />
                  </xsl:otherwise>
               </xsl:choose>
            </xsl:element>
         </xsl:element>
      </xsl:element>
   </xsl:template>

   <xsl:template match="/">
      <xsl:variable name="smallcase" select="'abcdefghijklmnopqrstuvwxyz'" />
      <xsl:variable name="uppercase" select="'ABCDEFGHIJKLMNOPQRSTUVWXYZ'" />
      <xsl:choose>
         <xsl:when test="//s:Fault/*">
            <xsl:call-template name="custom">
               <xsl:with-param name="resultSetSizeParam">0</xsl:with-param>
               <xsl:with-param name="statusDescriptionParam"><xsl:value-of select="//s:Fault/s:faultstring[1]" /></xsl:with-param>
               <xsl:with-param name="statusCodeParam"><xsl:value-of select="//s:Fault/s:faultcode[1]" /></xsl:with-param>
            </xsl:call-template>
         </xsl:when>
         <xsl:when test="//urn:Header/urn:Status = 203">
            <xsl:call-template name="custom">
               <xsl:with-param name="resultSetSizeParam">0</xsl:with-param>
               <xsl:with-param name="statusDescriptionParam">Not enough data submitted to complete the search. At least one credential or first name, last name and state is recommended to perform a successful search. Please refine your search for optimal results</xsl:with-param>
               <xsl:with-param name="statusCodeParam">0</xsl:with-param>
            </xsl:call-template>
         </xsl:when>
         <xsl:when test="count(//urn:Provider) = 0">
            <xsl:call-template name="custom">
               <xsl:with-param name="resultSetSizeParam">0</xsl:with-param>
               <xsl:with-param name="statusDescriptionParam">No Prescriber records found</xsl:with-param>
               <xsl:with-param name="statusCodeParam">0</xsl:with-param>
            </xsl:call-template>
         </xsl:when>
         <xsl:otherwise>
            <xsl:call-template name="custom">
               <xsl:with-param name="resultSetSizeParam">
                  <xsl:call-template name="countResultSize"/>
               </xsl:with-param>
               <xsl:with-param name="statusDescriptionParam">
                  <xsl:call-template name="setResultDescription">
                     <xsl:with-param name="resultSize">
                        <xsl:call-template name="countResultSize"/>
                     </xsl:with-param>
                  </xsl:call-template>

               </xsl:with-param>
               <xsl:with-param name="statusCodeParam">200</xsl:with-param>
            </xsl:call-template>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>

   <xsl:template name="setResultDescription">
      <xsl:param name="resultSize"/>
      <xsl:choose>
         <xsl:when test="$resultSize > 0">Success</xsl:when>
         <xsl:otherwise>No Prescriber records found</xsl:otherwise>
      </xsl:choose>
   </xsl:template>

   <xsl:template name="countResultSize">
      <xsl:variable name="smallcase" select="'abcdefghijklmnopqrstuvwxyz'" />
      <xsl:variable name="uppercase" select="'ABCDEFGHIJKLMNOPQRSTUVWXYZ'" />
      <xsl:variable name="resultCountRet">
         <xsl:call-template name="addDigits">
            <xsl:with-param name="digits">
               <xsl:choose>
                  <xsl:when test="$QueryDeaNum">
                     <xsl:variable name="deaRecords" select="count(//urn:Providers/urn:Provider/urn:DEARecords/urn:DEARecord[./urn:DEANumber = $QueryDeaNum])"/>
                     <xsl:choose>
                        <xsl:when test="$deaRecords > 0">
                           <xsl:for-each select="//urn:Providers/urn:Provider/urn:DEARecords/urn:DEARecord[./urn:DEANumber = $QueryDeaNum]">
                              <xsl:variable name="StreetAddress1" select="./urn:Address/urn:StreetAddress1" />
                              <xsl:variable name="Zip5" select="./urn:Address/urn:Zip5" />
                              <xsl:choose>
                                 <xsl:when test="$QueryState and $QueryZip and $QueryCity">
                                    <xsl:value-of select="count(//urn:Locations/urn:Location/urn:Address[urn:StreetAddress1 = $StreetAddress1 and urn:Zip5 = $Zip5 and urn:State = $QueryState and urn:Zip5 = $QueryZip and substring(urn:City,1,string-length($QueryCity)) = translate($QueryCity, $smallcase, $uppercase)])" />
                                 </xsl:when>
                                 <xsl:when test="$QueryState and $QueryZip">
                                    <xsl:value-of select="count(//urn:Locations/urn:Location/urn:Address[urn:StreetAddress1 = $StreetAddress1 and urn:Zip5 = $Zip5 and urn:State = $QueryState and urn:Zip5 = $QueryZip])" />
                                 </xsl:when>
                                 <xsl:when test="$QueryState and $QueryCity">
                                    <xsl:value-of select="count(//urn:Locations/urn:Location/urn:Address[urn:StreetAddress1 = $StreetAddress1 and urn:Zip5 = $Zip5 and urn:State = $QueryState and substring(urn:City,1,string-length($QueryCity)) = translate($QueryCity, $smallcase, $uppercase)])" />
                                 </xsl:when>
                                 <xsl:when test="$QueryZip and $QueryCity">
                                    <xsl:value-of select="count(//urn:Locations/urn:Location/urn:Address[urn:StreetAddress1 = $StreetAddress1 and urn:Zip5 = $Zip5 and urn:Zip5 = $QueryZip and substring(urn:City,1,string-length($QueryCity)) = translate($QueryCity, $smallcase, $uppercase)])" />
                                 </xsl:when>
                                 <xsl:when test="$QueryState or $QueryZip">
                                    <xsl:value-of select="count(//urn:Locations/urn:Location/urn:Address[urn:StreetAddress1 = $StreetAddress1 and urn:Zip5 = $Zip5 and (urn:Zip5 = $QueryZip or urn:State = $QueryState)])" />
                                 </xsl:when>
                                 <xsl:when test="$QueryCity">
                                    <xsl:value-of select="count(//urn:Locations/urn:Location/urn:Address[urn:StreetAddress1 = $StreetAddress1 and urn:Zip5 = $Zip5 and substring(urn:City,1,string-length($QueryCity)) = translate($QueryCity, $smallcase, $uppercase)])" />
                                 </xsl:when>
                                 <xsl:otherwise>
                                    <xsl:value-of select="count(//urn:Locations/urn:Location/urn:Address[urn:StreetAddress1 = $StreetAddress1 and urn:Zip5 = $Zip5])" />
                                 </xsl:otherwise>
                              </xsl:choose>
                           </xsl:for-each>
                        </xsl:when>
                        <xsl:otherwise>
                           <xsl:value-of select="0" />
                        </xsl:otherwise>
                     </xsl:choose>
                  </xsl:when>
                  <xsl:otherwise>
                     <xsl:choose>
                        <xsl:when test="$QueryState and $QueryZip and $QueryCity">
                           <xsl:value-of select="count(//urn:Locations/urn:Location/urn:Address[urn:State = $QueryState and urn:Zip5 = $QueryZip and substring(urn:City,1,string-length($QueryCity)) = translate($QueryCity, $smallcase, $uppercase)])" />
                        </xsl:when>
                        <xsl:when test="$QueryState and $QueryZip">
                           <xsl:value-of select="count(//urn:Locations/urn:Location/urn:Address[urn:State = $QueryState and urn:Zip5 = $QueryZip])" />
                        </xsl:when>
                        <xsl:when test="$QueryState and $QueryCity">
                           <xsl:value-of select="count(//urn:Locations/urn:Location/urn:Address[urn:State = $QueryState and substring(urn:City,1,string-length($QueryCity)) = translate($QueryCity, $smallcase, $uppercase)])" />
                        </xsl:when>
                        <xsl:when test="$QueryZip and $QueryCity">
                           <xsl:value-of select="count(//urn:Locations/urn:Location/urn:Address[urn:Zip5 = $QueryZip and substring(urn:City,1,string-length($QueryCity)) = translate($QueryCity, $smallcase, $uppercase)])" />
                        </xsl:when>
                        <xsl:when test="$QueryState or $QueryZip">
                           <xsl:value-of select="count(//urn:Locations/urn:Location/urn:Address[urn:Zip5 = $QueryZip or urn:State = $QueryState])" />
                        </xsl:when>
                        <xsl:when test="$QueryCity">
                           <xsl:value-of select="count(//urn:Locations/urn:Location/urn:Address[substring(urn:City,1,string-length($QueryCity)) = translate($QueryCity, $smallcase, $uppercase)])" />
                        </xsl:when>
                        <xsl:otherwise>
                           <xsl:value-of select="count(//urn:Location)" />
                        </xsl:otherwise>
                     </xsl:choose>
                  </xsl:otherwise>
               </xsl:choose>
            </xsl:with-param>
            <xsl:with-param name="total" select="0"/>
         </xsl:call-template>
      </xsl:variable>
      <xsl:value-of select="$resultCountRet"/>
   </xsl:template>

   <!--This template will add up all the digits of a given number. This is needed here because for searching with deaNumber if there are multiple matches,
       then we need to count the possible providers by counting the matching locations for each of the dea records and this generates number like '213' if
       first deaRecord matches  with 2 locations of providers and the second deaRecord matches with 1 locations of providers and the third deaRecord matches
       with 3 locations of providers. Hence we need to add up the digits 2, 1 and 3 to get the total provider records of 6 which will be returned to the user.-->
   <xsl:template name="addDigits">
      <xsl:param name="digits"/>
      <xsl:param name="total"/>
      <xsl:if test="$digits != 0">
         <xsl:call-template name="addDigits">
            <xsl:with-param name="digits" select="floor($digits div 10)"/>
            <xsl:with-param name="total" select="($total + ( $digits mod 10))"/>
         </xsl:call-template>
      </xsl:if>
      <xsl:if test="$digits = 0">
         <xsl:value-of select="$total"/>
      </xsl:if>
   </xsl:template>

   <xsl:template match="//urn:Provider">
      <xsl:variable name="smallcase" select="'abcdefghijklmnopqrstuvwxyz'" />
      <xsl:variable name="uppercase" select="'ABCDEFGHIJKLMNOPQRSTUVWXYZ'" />
      <xsl:variable name="resultCount">
         <xsl:call-template name="countResultSize"/>
      </xsl:variable>
      <xsl:choose>
         <xsl:when test="$resultCount > 0">
            <xsl:choose>
               <xsl:when test="$QueryState and $QueryZip and $QueryCity">
                  <xsl:for-each select="./urn:Locations/urn:Location[urn:Address/urn:Zip5 = $QueryZip and urn:Address/urn:State = $QueryState and substring(urn:Address/urn:City,1,string-length($QueryCity)) = translate($QueryCity, $smallcase, $uppercase)]">
                           <xsl:call-template name="prescriberResult"></xsl:call-template>
                  </xsl:for-each>
               </xsl:when>
               <xsl:when test="$QueryState and $QueryZip">
                 <xsl:for-each select="./urn:Locations/urn:Location[urn:Address/urn:Zip5 = $QueryZip and urn:Address/urn:State = $QueryState]">
                           <xsl:call-template name="prescriberResult"></xsl:call-template>
                  </xsl:for-each>
               </xsl:when>
               <xsl:when test="$QueryState and $QueryCity">
                  <xsl:for-each select="./urn:Locations/urn:Location[urn:Address/urn:State = $QueryState and substring(urn:Address/urn:City,1,string-length($QueryCity)) = translate($QueryCity, $smallcase, $uppercase)]">
                           <xsl:call-template name="prescriberResult"></xsl:call-template>
                  </xsl:for-each>
               </xsl:when>
               <xsl:when test="$QueryZip and $QueryCity">
                 <xsl:for-each select="./urn:Locations/urn:Location[urn:Address/urn:Zip5 = $QueryZip and substring(urn:Address/urn:City,1,string-length($QueryCity)) = translate($QueryCity, $smallcase, $uppercase)]">
                           <xsl:call-template name="prescriberResult"></xsl:call-template>
                 </xsl:for-each>
               </xsl:when>
               <xsl:when test="$QueryState">
                  <xsl:for-each select="./urn:Locations/urn:Location[urn:Address/urn:State = $QueryState]">
                           <xsl:call-template name="prescriberResult"></xsl:call-template>
                  </xsl:for-each>
               </xsl:when>
               <xsl:when test="$QueryZip">
                  <xsl:for-each select="./urn:Locations/urn:Location[urn:Address/urn:Zip5 = $QueryZip]">
                     <xsl:call-template name="prescriberResult"></xsl:call-template>
                  </xsl:for-each>
               </xsl:when>
               <xsl:when test="$QueryCity">
                  <xsl:for-each select="./urn:Locations/urn:Location[substring(urn:Address/urn:City,1,string-length($QueryCity)) = translate($QueryCity, $smallcase, $uppercase)]">
                     <xsl:call-template name="prescriberResult"></xsl:call-template>
                  </xsl:for-each>
               </xsl:when>
               <xsl:otherwise>
                  <xsl:for-each select="./urn:Locations/urn:Location">
                     <xsl:call-template name="prescriberResult"></xsl:call-template>
                  </xsl:for-each>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:when>
         <xsl:otherwise>
            <xsl:call-template name="noResultsElement"></xsl:call-template>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>
   
   <xsl:template name="prescriberResult">
      <xsl:variable name="state" select="./urn:Address/urn:State" />
      <xsl:variable name="StreetAddress1" select="./urn:Address/urn:StreetAddress1" />
      <xsl:variable name="Zip5" select="./urn:Address/urn:Zip5" />
      <xsl:choose>
         <xsl:when test="$QueryDeaNum">
            <xsl:variable name="DEANumber">
               <xsl:for-each select="../../urn:DEARecords/urn:DEARecord[./urn:Address/urn:StreetAddress1 = $StreetAddress1 and ./urn:Address/urn:Zip5 = $Zip5 and ./urn:DEANumber = $QueryDeaNum]">
                  <xsl:call-template name="sortDeaRecords"></xsl:call-template>
                  <xsl:if test="position()=1">
                     <xsl:value-of select="./urn:DEANumber"/>
                  </xsl:if>
               </xsl:for-each>
            </xsl:variable>
            <xsl:if test="$DEANumber != ''">
               <xsl:call-template name="populatePrescriberDetails">
                  <xsl:with-param name="DEANumber" select="$DEANumber"/>
                  <xsl:with-param name="state" select="$state"/>
                  <xsl:with-param name="StreetAddress1" select="$StreetAddress1"/>
                  <xsl:with-param name="Zip5" select="$Zip5"/>
               </xsl:call-template>
            </xsl:if>
         </xsl:when>
         <xsl:otherwise>
            <xsl:call-template name="populatePrescriberDetails">
               <xsl:with-param name="state" select="$state"/>
               <xsl:with-param name="StreetAddress1" select="$StreetAddress1"/>
               <xsl:with-param name="Zip5" select="$Zip5"/>
            </xsl:call-template>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>

   <xsl:template name="populatePrescriberDetails">
      <xsl:param name="DEANumber"/>
      <xsl:param name="state"/>
      <xsl:param name="StreetAddress1"/>
      <xsl:param name="Zip5"/>
      <xsl:element name="Prescriber" xmlns="">
         <xsl:element name="lastName">
            <xsl:value-of select="../../urn:ProviderNames/urn:ProviderName[1]/urn:Name/urn:Last" />
         </xsl:element>
         <xsl:element name="firstName">
            <xsl:value-of select="../../urn:ProviderNames/urn:ProviderName[1]/urn:Name/urn:First" />
         </xsl:element>
         <xsl:element name="midName">
            <xsl:value-of select="../../urn:ProviderNames/urn:ProviderName[1]/urn:Name/urn:Middle" />
         </xsl:element>
         <xsl:element name="address">
            <xsl:value-of select="./urn:Address/urn:StreetAddress1" />
         </xsl:element>
         <xsl:element name="address2">
            <xsl:value-of select="./urn:Address/urn:StreetAddress2" />
         </xsl:element>
         <xsl:element name="city">
            <xsl:value-of select="./urn:Address/urn:City" />
         </xsl:element>
         <xsl:element name="state">
            <xsl:value-of select="./urn:Address/urn:State" />
         </xsl:element>
         <xsl:element name="zipCode">
            <xsl:value-of select="./urn:Address/urn:Zip5" />
         </xsl:element>
         <xsl:element name="areaCode">
            <xsl:value-of select="substring(./urn:Phones/urn:Phone[1]/urn:Number,1,3)" />
         </xsl:element>
         <xsl:element name="phone">
            <xsl:value-of select="substring(./urn:Phones/urn:Phone[1]/urn:Number,4,7)" />
         </xsl:element>
         <xsl:choose>
            <xsl:when test="$QueryDeaNum">
               <xsl:for-each select="../../urn:DEARecords/urn:DEARecord[./urn:Address/urn:StreetAddress1 = $StreetAddress1 and ./urn:Address/urn:Zip5 = $Zip5 and ./urn:DEANumber = $DEANumber]">
                  <xsl:call-template name="populateDeaNumber"></xsl:call-template>
               </xsl:for-each>
            </xsl:when>
            <xsl:otherwise>
               <xsl:for-each select="../../urn:DEARecords/urn:DEARecord[./urn:Address/urn:StreetAddress1 = $StreetAddress1 and ./urn:Address/urn:Zip5 = $Zip5]">
                  <xsl:call-template name="populateDeaNumber"></xsl:call-template>
               </xsl:for-each>
            </xsl:otherwise>
         </xsl:choose>
         <xsl:element name="npiNum">
            <xsl:value-of select="../../urn:NPIRecords/urn:NPIRecord/urn:NPIInformation/urn:NPINumber" />
         </xsl:element>
         <xsl:for-each select="../../urn:Licenses/urn:License[urn:LicenseState = $state]">
            <xsl:if test="position()=1">
               <xsl:element name="stateIdNum">
                  <xsl:value-of select="./urn:LicenseNumber"/>
               </xsl:element>
            </xsl:if>
         </xsl:for-each>
         <xsl:element name="rcpsIdNum">
            <xsl:value-of select="../../urn:LNPID"/>
         </xsl:element>
         <xsl:element name="vendorId">2</xsl:element>
         <xsl:element name="locationIdentifier">
            <xsl:value-of select="./urn:Address/urn:LegacyLocationId"/>
         </xsl:element>
         <xsl:element name="addressGroupIdentifier">
            <xsl:value-of select="./urn:Address/urn:LegacyAggregateId"/>
         </xsl:element>
      </xsl:element>
   </xsl:template>
   <xsl:template name="populateDeaNumber">
      <xsl:call-template name="sortDeaRecords"></xsl:call-template>
      <xsl:if test="position()=1">
         <xsl:element name="deaNum" xmlns="">
            <xsl:value-of select="./urn:DEANumber"/>
         </xsl:element>
         <xsl:element name="deaExpDate" xmlns="">
            <xsl:value-of select="normalize-space(./urn:ExpirationDate)" />
         </xsl:element>
      </xsl:if>
   </xsl:template>
   <xsl:template name="sortDeaRecords">
      <xsl:sort select="urn:Status" order="descending" />
   </xsl:template>
   <!-- Needed for compatibility with clients requiring the Prescriber element  -->
   <xsl:template name="noResultsElement">
      <xsl:element name="Prescriber" xmlns="">
         <xsl:element name="lastName" />
         <xsl:element name="firstName" />
         <xsl:element name="midName" />
         <xsl:element name="address" />
         <xsl:element name="address2" />
         <xsl:element name="city" />
         <xsl:element name="state" />
         <xsl:element name="zipCode" />
         <xsl:element name="areaCode" />
         <xsl:element name="phone" />
         <xsl:element name="deaNum" /> 
         <xsl:element name="npiNum" />
         <xsl:element name="stateIdNum" />
         <xsl:element name="rcpsIdNum" />
         <xsl:element name="vendorId" />
         <xsl:element name="locationIdentifier" />
         <xsl:element name="addressGroupIdentifier" />
      </xsl:element>
   </xsl:template>

</xsl:stylesheet>


</syn:localEntry>
